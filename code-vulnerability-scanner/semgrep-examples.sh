#!/bin/bash

# Semgrep Static Code Analysis Examples
# Demonstrates various scanning scenarios for Go/Next.js/Python stack

echo "=== Semgrep Static Code Analysis Examples ==="
echo

# Check if the Python script exists
if [ ! -f "semgrep_scanner.py" ]; then
    echo "Error: semgrep_scanner.py not found in current directory"
    exit 1
fi

# Make sure it's executable
chmod +x semgrep_scanner.py

echo "üîç Semgrep finds actual code vulnerabilities (unlike Trivy which scans dependencies)"
echo "   - SQL injection"
echo "   - XSS vulnerabilities"
echo "   - Hardcoded secrets"
echo "   - Code injection"
echo "   - Weak crypto usage"
echo "   - And much more..."
echo

echo "=== Available Commands ==="
echo

echo "1. üõ°Ô∏è  Security-focused scan (recommended for security audits)"
echo "   Command: ./semgrep_scanner.py security /path/to/code --severity ERROR"
echo "   Uses: p/security-audit ruleset (comprehensive security rules)"
echo

echo "2. üåê Language-specific scans"
echo "   Go:         ./semgrep_scanner.py language /path/to/go-code --lang go"
echo "   JavaScript: ./semgrep_scanner.py language /path/to/js-code --lang javascript"
echo "   TypeScript: ./semgrep_scanner.py language /path/to/ts-code --lang typescript"
echo "   Python:     ./semgrep_scanner.py language /path/to/py-code --lang python"
echo "   Docker:     ./semgrep_scanner.py language /path/to/dockerfiles --lang docker"
echo

echo "3. üöÄ Comprehensive scan (scan everything at once)"
echo "   Command: ./semgrep_scanner.py comprehensive /path/to/full-stack-app"
echo "   Runs: Security + Go + JavaScript + TypeScript + Python + Docker scans"
echo

echo "4. ‚öôÔ∏è  Custom rules scan"
echo "   Command: ./semgrep_scanner.py custom /path/to/code --config semgrep-custom-rules.yml"
echo "   Uses: Your custom security rules (included)"
echo

echo "=== Real Examples for Your Stack ==="
echo

echo "üî• Quick Start - Scan your pes-web project:"
echo "   ./semgrep_scanner.py comprehensive /Users/hsinhoyeh/Workspaces/github/footprintai/pes-web"
echo

echo "üìä Specific scans:"
echo "   # High-severity security issues only"
echo "   ./semgrep_scanner.py security /path/to/project --severity ERROR"
echo
echo "   # Go backend security scan"
echo "   ./semgrep_scanner.py language /path/to/go-service --lang go --severity ERROR"
echo
echo "   # Next.js frontend security scan"
echo "   ./semgrep_scanner.py language /path/to/nextjs-app --lang typescript --severity WARNING"
echo
echo "   # Python API security scan"
echo "   ./semgrep_scanner.py language /path/to/python-api --lang python --severity ERROR"
echo
echo "   # Custom rules for your specific needs"
echo "   ./semgrep_scanner.py custom /path/to/project --config semgrep-custom-rules.yml"
echo

echo "=== Output Formats ==="
echo "üìÑ Generated reports:"
echo "   - JSON format (for automation/CI/CD)"
echo "   - SARIF format (for GitHub Security tab)"
echo "   - Text format (human-readable)"
echo

echo "üìÅ Output locations:"
echo "   - Scan reports: ./security-reports/"
echo "   - Logs: ./logs/semgrep-scan.log"
echo

echo "=== What Semgrep Finds ==="
echo "‚úÖ SQL injection vulnerabilities"
echo "‚úÖ Cross-site scripting (XSS)"
echo "‚úÖ Hardcoded API keys/passwords"
echo "‚úÖ Code injection (eval, exec)"
echo "‚úÖ Weak cryptography usage"
echo "‚úÖ Prototype pollution (JS)"
echo "‚úÖ Unsafe deserialization"
echo "‚úÖ OWASP Top 10 vulnerabilities"
echo "‚úÖ Language-specific security issues"
echo

echo "=== Severity Levels ==="
echo "üö® ERROR   - Critical security vulnerabilities"
echo "‚ö†Ô∏è  WARNING - Important security issues"
echo "‚ÑπÔ∏è  INFO    - Code quality and minor issues"
echo

echo "=== Quick Commands to Try ==="
echo "# Test the scanner"
echo "./semgrep_scanner.py --help"
echo
echo "# Comprehensive scan of your project"
echo "./semgrep_scanner.py comprehensive /Users/hsinhoyeh/Workspaces/github/footprintai/pes-web"
echo
echo "# Security-only scan with high severity"
echo "./semgrep_scanner.py security /Users/hsinhoyeh/Workspaces/github/footprintai/pes-web --severity ERROR"
echo