#!/usr/bin/env python3

"""
Trivy Docker-based Vulnerability Scanner
A Python wrapper for running Trivy vulnerability scans using Docker
"""

import argparse
import json
import logging
import shutil
import subprocess
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional


class TrivyScanner:
    """Docker-based Trivy vulnerability scanner"""
    
    def __init__(self, script_dir: Path = None):
        self.script_dir = script_dir or Path(__file__).parent
        self.log_dir = self.script_dir / "logs"
        self.reports_dir = self.script_dir / "security-reports"
        self.trivy_image = "aquasec/trivy:latest"
        self.trivyignore_template = self.script_dir / "trivyignore-template"
        
        # Create directories
        self.log_dir.mkdir(exist_ok=True)
        self.reports_dir.mkdir(exist_ok=True)
        
        # Setup logging
        self._setup_logging()
        
    def _setup_logging(self):
        """Configure logging to file and console"""
        log_file = self.log_dir / "trivy-scan.log"
        
        logging.basicConfig(
            level=logging.INFO,
            format='[%(asctime)s] %(levelname)s: %(message)s',
            handlers=[
                logging.FileHandler(log_file),
                logging.StreamHandler(sys.stdout)
            ]
        )
        self.logger = logging.getLogger(__name__)
        
    def _run_docker_command(self, cmd: List[str]) -> subprocess.CompletedProcess:
        """Run Docker command with error handling"""
        try:
            self.logger.info(f"Running: docker {' '.join(cmd)}")
            result = subprocess.run(
                ["docker"] + cmd,
                capture_output=True,
                text=True,
                check=True
            )
            return result
        except subprocess.CalledProcessError as e:
            self.logger.error(f"Docker command failed: {e}")
            self.logger.error(f"stderr: {e.stderr}")
            raise
            
    def _check_docker(self) -> bool:
        """Check if Docker is available"""
        try:
            subprocess.run(["docker", "--version"], capture_output=True, check=True)
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            return False
            
    def pull_trivy_image(self):
        """Pull latest Trivy Docker image"""
        self.logger.info(f"Pulling {self.trivy_image}...")
        self._run_docker_command(["pull", self.trivy_image])
        
    def _ensure_trivyignore(self, target_path: Path) -> bool:
        """Ensure .trivyignore exists in target directory, create from template if missing"""
        trivyignore_path = target_path / ".trivyignore"
        
        if trivyignore_path.exists():
            self.logger.info(f"Using existing .trivyignore: {trivyignore_path}")
            return True
            
        if self.trivyignore_template.exists():
            self.logger.info(f"Creating .trivyignore from template: {trivyignore_path}")
            shutil.copy2(self.trivyignore_template, trivyignore_path)
            return True
        else:
            self.logger.warning(f"No .trivyignore template found at {self.trivyignore_template}")
            return False
        
    def _build_trivy_args(self, 
                         format: str = "json",
                         severity: Optional[str] = None,
                         ignore_unfixed: bool = False,
                         no_progress: bool = True,
                         scanners: Optional[str] = None) -> List[str]:
        """Build Trivy command arguments"""
        args = ["--format", format]
        
        if severity:
            args.extend(["--severity", severity])
        if ignore_unfixed:
            args.append("--ignore-unfixed")
        if no_progress:
            args.append("--no-progress")
        if scanners:
            args.extend(["--scanners", scanners])
            
        return args
        
    def scan_image(self, 
                   image: str,
                   severity: Optional[str] = None,
                   format: str = "json",
                   **kwargs) -> Dict[str, Path]:
        """Scan Docker image for vulnerabilities"""
        timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
        safe_image_name = image.replace("/", "-").replace(":", "-")
        
        output_files = {}
        
        # JSON report
        json_file = self.reports_dir / f"image-scan-{safe_image_name}-{timestamp}.json"
        cmd = [
            "run", "--rm",
            "-v", f"{self.reports_dir}:/reports",
            self.trivy_image, "image"
        ] + self._build_trivy_args(format="json", severity=severity, **kwargs) + [
            "--output", f"/reports/{json_file.name}",
            image
        ]
        
        self.logger.info(f"Scanning Docker image: {image}")
        self._run_docker_command(cmd)
        output_files["json"] = json_file
        
        # Table report for human reading
        table_file = json_file.with_suffix(".txt")
        cmd_table = [
            "run", "--rm",
            "-v", f"{self.reports_dir}:/reports",
            self.trivy_image, "image"
        ] + self._build_trivy_args(format="table", severity=severity, **kwargs) + [
            "--output", f"/reports/{table_file.name}",
            image
        ]
        
        self._run_docker_command(cmd_table)
        output_files["table"] = table_file
        
        self.logger.info(f"Image scan completed: {json_file}")
        return output_files
        
    def scan_repository(self, 
                       repo_path: Optional[Path] = None,
                       severity: Optional[str] = None,
                       **kwargs) -> Dict[str, Path]:
        """Scan repository for vulnerabilities, secrets, and misconfigurations"""
        repo_path = repo_path or self.script_dir
        timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
        
        # Ensure .trivyignore exists in target directory
        self._ensure_trivyignore(repo_path)
        
        output_files = {}
        
        # 1. Vulnerability scan (dependencies)
        vuln_json = self.reports_dir / f"repo-vuln-scan-{timestamp}.json"
        vuln_cmd = [
            "run", "--rm",
            "-v", f"{repo_path}:/workspace",
            "-v", f"{self.reports_dir}:/reports",
            self.trivy_image, "fs"
        ] + self._build_trivy_args(
            format="json", 
            severity=severity, 
            scanners="vuln",
            **kwargs
        ) + [
            "--output", f"/reports/{vuln_json.name}",
            "/workspace"
        ]
        
        self.logger.info(f"Scanning repository vulnerabilities: {repo_path}")
        self._run_docker_command(vuln_cmd)
        output_files["vuln_json"] = vuln_json
        
        # 2. Secret scan (source code)
        secret_json = self.reports_dir / f"repo-secrets-scan-{timestamp}.json"
        secret_cmd = [
            "run", "--rm",
            "-v", f"{repo_path}:/workspace",
            "-v", f"{self.reports_dir}:/reports",
            self.trivy_image, "fs"
        ] + self._build_trivy_args(
            format="json", 
            severity=severity,
            scanners="secret",
            **kwargs
        ) + [
            "--output", f"/reports/{secret_json.name}",
            "/workspace"
        ]
        
        self.logger.info(f"Scanning repository secrets: {repo_path}")
        self._run_docker_command(secret_cmd)
        output_files["secret_json"] = secret_json
        
        # 3. Misconfiguration scan
        misconfig_json = self.reports_dir / f"repo-misconfig-scan-{timestamp}.json"
        misconfig_cmd = [
            "run", "--rm",
            "-v", f"{repo_path}:/workspace",
            "-v", f"{self.reports_dir}:/reports",
            self.trivy_image, "fs"
        ] + self._build_trivy_args(
            format="json", 
            severity=severity,
            scanners="misconfig",
            **kwargs
        ) + [
            "--output", f"/reports/{misconfig_json.name}",
            "/workspace"
        ]
        
        self.logger.info(f"Scanning repository misconfigurations: {repo_path}")
        self._run_docker_command(misconfig_cmd)
        output_files["misconfig_json"] = misconfig_json
        
        # 4. Combined table report for easy reading
        table_file = self.reports_dir / f"repo-combined-scan-{timestamp}.txt"
        combined_cmd = [
            "run", "--rm",
            "-v", f"{repo_path}:/workspace",
            "-v", f"{self.reports_dir}:/reports",
            self.trivy_image, "fs"
        ] + self._build_trivy_args(
            format="table", 
            severity=severity, 
            scanners="vuln,secret,misconfig",
            **kwargs
        ) + [
            "--output", f"/reports/{table_file.name}",
            "/workspace"
        ]
        
        self._run_docker_command(combined_cmd)
        output_files["table"] = table_file
        
        self.logger.info(f"Repository scan completed. Reports: {len(output_files)} files")
        return output_files
        
    def scan_config(self, 
                   config_path: Optional[Path] = None,
                   severity: Optional[str] = None,
                   **kwargs) -> Dict[str, Path]:
        """Scan configuration files for misconfigurations"""
        config_path = config_path or self.script_dir
        timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
        
        # Ensure .trivyignore exists in target directory
        self._ensure_trivyignore(config_path)
        
        output_files = {}
        
        # JSON report
        json_file = self.reports_dir / f"config-scan-{timestamp}.json"
        cmd = [
            "run", "--rm",
            "-v", f"{config_path}:/workspace",
            "-v", f"{self.reports_dir}:/reports",
            self.trivy_image, "config"
        ] + self._build_trivy_args(format="json", severity=severity, **kwargs) + [
            "--output", f"/reports/{json_file.name}",
            "/workspace"
        ]
        
        self.logger.info(f"Scanning configurations: {config_path}")
        self._run_docker_command(cmd)
        output_files["json"] = json_file
        
        # Table report
        table_file = json_file.with_suffix(".txt")
        cmd_table = [
            "run", "--rm",
            "-v", f"{config_path}:/workspace",
            "-v", f"{self.reports_dir}:/reports",
            self.trivy_image, "config"
        ] + self._build_trivy_args(format="table", severity=severity, **kwargs) + [
            "--output", f"/reports/{table_file.name}",
            "/workspace"
        ]
        
        self._run_docker_command(cmd_table)
        output_files["table"] = table_file
        
        self.logger.info(f"Configuration scan completed: {json_file}")
        return output_files
        
    def quick_scan(self, severity: str = "HIGH,CRITICAL") -> Dict[str, Dict[str, Path]]:
        """Run comprehensive security scan"""
        self.logger.info("Running quick security scan of toolbox repository...")
        
        results = {}
        
        # Check if SSH jump server image exists and scan it
        try:
            result = subprocess.run(
                ["docker", "images", "--format", "{{.Repository}}:{{.Tag}}"],
                capture_output=True, text=True, check=True
            )
            images = result.stdout.strip().split('\n')
            
            for image in images:
                if 'ssh-jump-server' in image and 'latest' in image:
                    self.logger.info(f"Found image: {image}")
                    results["image_scan"] = self.scan_image(image, severity=severity)
                    break
        except subprocess.CalledProcessError:
            self.logger.warning("Could not check for existing Docker images")
            
        # Scan repository
        results["repo_scan"] = self.scan_repository(severity=severity)
        
        # Scan configurations
        results["config_scan"] = self.scan_config(severity=severity)
        
        self.logger.info(f"Quick scan completed. Reports saved to: {self.reports_dir}")
        return results
        
    def generate_summary(self, report_file: Path) -> Dict:
        """Generate summary from JSON report"""
        try:
            with open(report_file) as f:
                data = json.load(f)
            
            summary = {
                "total_vulnerabilities": 0,
                "by_severity": {"CRITICAL": 0, "HIGH": 0, "MEDIUM": 0, "LOW": 0, "UNKNOWN": 0},
                "scan_target": data.get("ArtifactName", "unknown"),
                "scan_type": data.get("ArtifactType", "unknown")
            }
            
            if "Results" in data:
                for result in data["Results"]:
                    if "Vulnerabilities" in result:
                        for vuln in result["Vulnerabilities"]:
                            severity = vuln.get("Severity", "UNKNOWN")
                            summary["by_severity"][severity] += 1
                            summary["total_vulnerabilities"] += 1
                            
            return summary
        except Exception as e:
            self.logger.error(f"Error generating summary: {e}")
            return {}


def main():
    """Main CLI interface"""
    parser = argparse.ArgumentParser(
        description="Trivy Docker-based vulnerability scanner",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  %(prog)s image nginx:latest
  %(prog)s repo --severity HIGH,CRITICAL
  %(prog)s config --ignore-unfixed
  %(prog)s quick
        """
    )
    
    subparsers = parser.add_subparsers(dest="command", help="Available commands")
    
    # Common arguments
    common_parser = argparse.ArgumentParser(add_help=False)
    common_parser.add_argument(
        "-s", "--severity",
        help="Comma-separated list of severities (UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL)"
    )
    common_parser.add_argument(
        "--ignore-unfixed",
        action="store_true",
        help="Ignore unfixed vulnerabilities"
    )
    common_parser.add_argument(
        "--no-progress",
        action="store_true",
        default=True,
        help="Suppress progress bar"
    )
    
    # Image scan
    image_parser = subparsers.add_parser(
        "image", parents=[common_parser], help="Scan Docker image"
    )
    image_parser.add_argument("image", help="Docker image to scan")
    
    # Repository scan
    repo_parser = subparsers.add_parser(
        "repo", parents=[common_parser], help="Scan repository"
    )
    repo_parser.add_argument(
        "path", nargs="?", help="Repository path (default: current directory)"
    )
    
    # Configuration scan
    config_parser = subparsers.add_parser(
        "config", parents=[common_parser], help="Scan configuration files"
    )
    config_parser.add_argument(
        "path", nargs="?", help="Configuration path (default: current directory)"
    )
    
    # Quick scan
    quick_parser = subparsers.add_parser(
        "quick", parents=[common_parser], help="Run comprehensive quick scan"
    )
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return 1
        
    # Initialize scanner
    scanner = TrivyScanner()
    
    # Check Docker availability
    if not scanner._check_docker():
        print("Error: Docker is not installed or not available")
        return 1
        
    # Pull Trivy image
    scanner.pull_trivy_image()
    
    # Prepare common kwargs
    kwargs = {
        "severity": args.severity,
        "ignore_unfixed": args.ignore_unfixed,
        "no_progress": args.no_progress
    }
    
    try:
        if args.command == "image":
            results = scanner.scan_image(args.image, **kwargs)
            
        elif args.command == "repo":
            path = Path(args.path) if args.path else None
            results = scanner.scan_repository(path, **kwargs)
            
        elif args.command == "config":
            path = Path(args.path) if args.path else None
            results = scanner.scan_config(path, **kwargs)
            
        elif args.command == "quick":
            results = scanner.quick_scan(severity=args.severity or "HIGH,CRITICAL")
            
        # Print summary for single scans
        if args.command != "quick" and "json" in results:
            summary = scanner.generate_summary(results["json"])
            if summary:
                print(f"\nScan Summary:")
                print(f"Target: {summary['scan_target']}")
                print(f"Total vulnerabilities: {summary['total_vulnerabilities']}")
                for sev, count in summary['by_severity'].items():
                    if count > 0:
                        print(f"  {sev}: {count}")
                        
        print(f"\nReports saved to: {scanner.reports_dir}")
        return 0
        
    except Exception as e:
        print(f"Error: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())