# Custom Semgrep Rules for Go/Next.js/Python Stack
# Focus on common security issues in full-stack applications

rules:
  # Go-specific security rules
  - id: go-sql-injection
    pattern-either:
      - pattern: |
          db.Query($SQL, ...)
      - pattern: |
          db.Exec($SQL, ...)
      - pattern: |
          rows, err := db.Query($SQL, ...)
    message: Potential SQL injection vulnerability - use parameterized queries
    languages: [go]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-89: SQL Injection"
      
  - id: go-hardcoded-credentials
    pattern-either:
      - pattern: |
          password := "$PASSWORD"
      - pattern: |
          apiKey := "$KEY"
      - pattern: |
          secret := "$SECRET"
    message: Hardcoded credentials detected
    languages: [go]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-798: Hardcoded Credentials"

  - id: go-weak-crypto
    pattern-either:
      - pattern: md5.New()
      - pattern: sha1.New()
      - pattern: des.NewCipher(...)
    message: Weak cryptographic algorithm detected
    languages: [go]
    severity: WARNING
    metadata:
      category: security
      cwe: "CWE-327: Broken Crypto"

  # JavaScript/TypeScript security rules
  - id: js-eval-usage
    pattern-either:
      - pattern: eval($CODE)
      - pattern: Function($CODE)
      - pattern: new Function($CODE)
    message: Use of eval() or Function constructor can lead to code injection
    languages: [javascript, typescript]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-95: Code Injection"

  - id: js-xss-vulnerability
    pattern-either:
      - pattern: |
          element.innerHTML = $INPUT
      - pattern: |
          document.write($INPUT)
      - pattern: |
          $(...).html($INPUT)
    message: Potential XSS vulnerability - sanitize user input
    languages: [javascript, typescript]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-79: XSS"

  - id: js-hardcoded-secrets
    pattern-either:
      - pattern: |
          const apiKey = "$KEY"
      - pattern: |
          const password = "$PASS"
      - pattern: |
          const secret = "$SECRET"
      - pattern: |
          process.env.API_KEY = "$KEY"
    message: Hardcoded API key or secret detected
    languages: [javascript, typescript]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-798: Hardcoded Credentials"

  - id: js-prototype-pollution
    pattern-either:
      - pattern: |
          $OBJ.__proto__ = $VALUE
      - pattern: |
          $OBJ['__proto__'] = $VALUE
      - pattern: |
          $OBJ.constructor.prototype = $VALUE
    message: Potential prototype pollution vulnerability
    languages: [javascript, typescript]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-1321: Prototype Pollution"

  # Python security rules
  - id: python-sql-injection
    pattern-either:
      - pattern: |
          cursor.execute("..." + $VAR)
      - pattern: |
          cursor.execute("..." % $VAR)
      - pattern: |
          cursor.execute(f"...{$VAR}...")
    message: Potential SQL injection - use parameterized queries
    languages: [python]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-89: SQL Injection"

  - id: python-code-injection
    pattern-either:
      - pattern: eval($INPUT)
      - pattern: exec($INPUT)
      - pattern: compile($INPUT, ...)
    message: Use of eval/exec can lead to code injection
    languages: [python]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-95: Code Injection"

  - id: python-hardcoded-secrets
    pattern-either:
      - pattern: |
          PASSWORD = "$PASS"
      - pattern: |
          API_KEY = "$KEY"
      - pattern: |
          SECRET_KEY = "$SECRET"
      - pattern: |
          os.environ['API_KEY'] = "$KEY"
    message: Hardcoded credentials detected
    languages: [python]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-798: Hardcoded Credentials"

  - id: python-pickle-deserialization
    pattern-either:
      - pattern: pickle.loads($DATA)
      - pattern: pickle.load($FILE)
      - pattern: cPickle.loads($DATA)
    message: Unsafe deserialization with pickle - can lead to RCE
    languages: [python]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-502: Unsafe Deserialization"

  # Cross-language rules
  - id: weak-random-generation
    pattern-either:
      - pattern: math.random()  # JavaScript
      - pattern: Math.random()  # JavaScript
      - pattern: random.random()  # Python
      - pattern: rand.Intn(...)  # Go
    message: Weak random number generation - use cryptographically secure random
    languages: [javascript, typescript, python, go]
    severity: WARNING
    metadata:
      category: security
      cwe: "CWE-338: Weak PRNG"

  - id: debug-code-left
    pattern-either:
      - pattern: console.log(...)
      - pattern: print("DEBUG", ...)
      - pattern: fmt.Println("DEBUG", ...)
      - pattern: log.Debug(...)
    message: Debug code should not be left in production
    languages: [javascript, typescript, python, go]
    severity: INFO
    metadata:
      category: maintainability

  # Docker security rules
  - id: dockerfile-root-user
    pattern: USER root
    message: Running container as root user is a security risk
    languages: [dockerfile]
    severity: WARNING
    metadata:
      category: security
      cwe: "CWE-250: Privilege Management"

  - id: dockerfile-no-healthcheck
    pattern-not: HEALTHCHECK
    message: Container should have a health check
    languages: [dockerfile]
    severity: INFO
    metadata:
      category: reliability